# YAML to XML Conversion Process Documentation

## Overview

This document outlines the complete process flow for converting Credo AI YAML policy files into OpenPages XML configuration files. The process handles both individual YAML file pairs and ZIP archives containing multiple policies.

## Input Files

The tool accepts two types of input:

1. Individual YAML files:
   - `base.yaml`: Contains basic policy information and metadata
   - `v{n}.yaml`: Contains version-specific control and evidence requirements

2. ZIP archive containing multiple policy folders:
   - Each folder contains a `base.yaml` and version YAML file
   - Version files must start with 'v' (e.g., `v1.yaml`, `v2.yaml`)

## Processing Steps

### 1. File Input Handling

#### For Individual Files:
1. Identifies base YAML files by checking for 'base' in filename
2. Matches version files by looking for files starting with 'v'
3. Groups matching base and version files by policy name

#### For ZIP Archives:
1. Extracts all files from the archive
2. Groups files by directory
3. Identifies base and version files within each directory
4. Validates that each directory has both required files

### 2. YAML Parsing

For each policy:
1. Parses base YAML file to extract:
   - Policy key/ID
   - Metadata (domains, industries, regions)
   - Policy information (name, description)

2. Parses version YAML to extract:
   - Controls
   - Evidence requirements
   - Implementation guidance
   - Citations

### 3. Resource Generation

Creates the following resources for each policy:

#### a. Folder Structure
- Creates standardized folder hierarchy:
  ```
  /_op_sox/Project/Default/ICDocumentation/
  ├── Compliance Plans/Library/MRG/AI Compliance Plan Library/{LibraryId}
  ├── Obligations/Library/MRG/AI Compliance Plan Library/{LibraryId}
  └── Obligation Evaluations/Library/MRG/AI Compliance Plan Library/{LibraryId}
  ```

#### b. Compliance Plan
- Creates one Compliance Plan per policy
- Maps metadata from base YAML
- Sets standard attributes and bundles

#### c. Obligations
- Creates one Obligation per evidence requirement
- Maps control and evidence information
- Handles special cases for different evidence types:
  - Metric thresholds
  - Documentation requirements
  - Attestation requirements
- Includes citations and guidance where available

#### d. Obligation Evaluations
- Creates one Evaluation per Obligation
- Mirrors Obligation properties
- Adds evaluation-specific attributes
- Sets assessable status

### 4. Relationship Building

Creates relationships between resources:
1. Compliance Plan to Obligations (primary=true)
2. Compliance Plan to Obligation Evaluations (primary=false)
3. Obligations to their respective Evaluations (primary=true)

### 5. XML Generation

1. Generates XML structure following OpenPages schema
2. Includes:
   - System information
   - Resource definitions
   - Bundle properties
   - Resource relationships
3. Formats XML for readability

### 6. Output Generation

Creates three types of outputs:

1. Individual XML files:
   - One per policy
   - Named using policy key/ID
   - Contains complete resource structure

2. Consolidated ZIP archive containing:
   ```
   watsonxgovernance_compliance_accelerator_{date}.zip
   ├── inputs/
   │   └── {PolicyKey}/
   │       ├── base.yaml
   │       └── version.yaml
   ├── outputs/
   │   ├── {PolicyKey}-{date}-op-config.xml
   │   └── AllPlans-{date}-op-config.xml
   └── logs/
       ├── processing_log_{date}.csv
       └── detailed_report_{date}.txt
   ```

3. Processing logs:
   - CSV summary of resource counts
   - Detailed processing report
   - Error logs if applicable

## Resource Mapping

The tool follows specific mapping rules defined in `xml-yaml-mapping.csv` for:
- Field names
- Data sources
- Default values
- Bundle properties
- Resource attributes

## Error Handling

1. Input Validation:
   - Verifies required files exist
   - Validates YAML syntax
   - Checks for required fields

2. Processing Safeguards:
   - Handles missing optional fields
   - Provides default values where appropriate
   - Sanitizes XML content

3. Error Reporting:
   - Detailed error messages
   - Processing logs
   - Resource generation summary

## Output Validation

1. Verifies generated XML:
   - Schema compliance
   - Required fields
   - Relationship integrity

2. Validates resource counts:
   - Expected number of resources
   - Relationship completeness
   - Bundle property presence

## Performance Considerations

1. Parallel Processing:
   - Handles multiple policies simultaneously
   - Efficient ZIP file processing
   - Optimized XML generation

2. Memory Management:
   - Streams large files
   - Cleanup of temporary resources
   - Efficient data structures

## Security Measures

1. Input Sanitization:
   - XML entity escaping
   - Path validation
   - Content verification

2. Output Protection:
   - Secure file handling
   - Permission management
   - Resource isolation